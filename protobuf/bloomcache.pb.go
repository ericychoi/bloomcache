// Code generated by protoc-gen-go.
// source: protobuf/bloomcache.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	protobuf/bloomcache.proto

It has these top-level messages:
	Request
	Response
	CheckResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CheckResponse struct {
	Exists bool   `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Request)(nil), "protobuf.Request")
	proto.RegisterType((*Response)(nil), "protobuf.Response")
	proto.RegisterType((*CheckResponse)(nil), "protobuf.CheckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Bloomcache service

type BloomcacheClient interface {
	// Adds a key
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Checks for existence of a key
	Check(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CheckResponse, error)
}

type bloomcacheClient struct {
	cc *grpc.ClientConn
}

func NewBloomcacheClient(cc *grpc.ClientConn) BloomcacheClient {
	return &bloomcacheClient{cc}
}

func (c *bloomcacheClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protobuf.Bloomcache/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bloomcacheClient) Check(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := grpc.Invoke(ctx, "/protobuf.Bloomcache/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bloomcache service

type BloomcacheServer interface {
	// Adds a key
	Add(context.Context, *Request) (*Response, error)
	// Checks for existence of a key
	Check(context.Context, *Request) (*CheckResponse, error)
}

func RegisterBloomcacheServer(s *grpc.Server, srv BloomcacheServer) {
	s.RegisterService(&_Bloomcache_serviceDesc, srv)
}

func _Bloomcache_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomcacheServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Bloomcache/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomcacheServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bloomcache_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BloomcacheServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Bloomcache/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BloomcacheServer).Check(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bloomcache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Bloomcache",
	HandlerType: (*BloomcacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Bloomcache_Add_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Bloomcache_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("protobuf/bloomcache.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0xca, 0xc9, 0xcf, 0xcf, 0x4d, 0x4e, 0x4c, 0xce, 0x48, 0xd5,
	0x03, 0x8b, 0x09, 0x71, 0xc0, 0xa4, 0x94, 0xa4, 0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40,
	0x4c, 0x25, 0x05, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x11, 0x2e,
	0xd6, 0xd4, 0xa2, 0xa2, 0xfc, 0x22, 0xa8, 0x3c, 0x84, 0xa3, 0x64, 0xcb, 0xc5, 0xeb, 0x9c, 0x91,
	0x9a, 0x9c, 0x0d, 0x57, 0x26, 0xc6, 0xc5, 0x96, 0x5a, 0x91, 0x59, 0x5c, 0x52, 0x0c, 0x56, 0xc7,
	0x11, 0x04, 0xe5, 0x21, 0xb4, 0x33, 0x21, 0x69, 0x37, 0x2a, 0xe6, 0xe2, 0x72, 0x82, 0xbb, 0x4d,
	0x48, 0x8f, 0x8b, 0xd9, 0x31, 0x25, 0x45, 0x48, 0x50, 0x0f, 0xe6, 0x3a, 0x3d, 0xa8, 0xd3, 0xa4,
	0x84, 0x90, 0x85, 0x20, 0x36, 0x29, 0x31, 0x08, 0x99, 0x72, 0xb1, 0x82, 0x2d, 0xc7, 0xa6, 0x43,
	0x1c, 0x21, 0x84, 0xe2, 0x40, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x8c, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x86, 0x3c, 0x1a, 0x20, 0x01, 0x00, 0x00,
}
